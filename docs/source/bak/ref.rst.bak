
类型操作模式
---------------------

之前的 ``List`` 中，我们已经简单展示了，类模版本身也是一个生成类型的函数，因而也允许通过不同的参数模式选择不同的类型。我们再来看一个
来自于真实项目中的例子。

有这样一个模版：

.. code-block:: c++

   template <IsPredicate PRED>
   struct Optional {
      auto isTrue() const -> bool { return pred(); }
      PRED   pred;
      // ...
   };

其中 ``PRED`` 是一个谓词，即 **仿函数** 。这个谓词，先实例化成了成员变量被保存了下来，等到随后需要的时候会被调用。

但这中间的麻烦是，谓词的实现，经常是没有任何数据成员的，所以 ``sizeof(PRED) == 1`` ，这是 ``C++`` 规定的一个空对象的尺寸。
毕竟每个对象都需要有自己独一无二的地址，如果大小为 0，就可能会和别的对象地址重叠。

而空对象一旦变成一个类的数据成员，基于对齐的原因，其最终所占空间很可能比原来要大。比如，如果这个类中只有这一个数据成员，
那么在 64 位系统上，因为对齐，最后就会有 8 个字节的开销。

为了避免这种不必要的空间消耗，我们可以在编译时做一个优化，如果发现模版参数传进来的是一个空对象类型，就不做保存，而是使用时临时创建。

所以，之前的定义的变成了如下的样子：

.. code-block:: c++

   template <template PRED, size_t SIZE = sizeof(PRED)>
   struct Optional {
      auto isTrue() const -> bool { return pred(); }
      PRED   pred;
      // ...
   };

   template <template PRED>
   struct Optional<PRED, 1> {
      auto isTrue() const -> bool { return PRED{}(); }
      // ...
   };

正如我们之前所讨论的是，用 ``agda`` 伪代码表达的语意如下：

.. code-block:: agda

   Optional           : ( PRED : Set ) -> size_t -> Set
   Optional PRED 1    = struct { ... } // 2nd struct def
   Optional PRED SIZE = struct { ... } // 1st struct def

同样，像任何函数调用一样，不同的参数模式，会匹配到不同的版本，因而估值也会得到不同的结果类型。有趣的是，``C++`` 规范规定了，当对
类模版进行匹配时，的确是将其转化为虚构的函数，然后根据函数的重载规则来进行匹配。

当然，对于这个问题，``C++`` 有更简单的实现方式来解决：使用继承，而不是包含。比如：

.. code-block:: c++

   template <template PRED>
   struct Optional : private PRED {
      auto isTrue() const -> bool { return PRED::operator()(); }
      // ...
   };

因为 ``C++`` 继承语意保证了，如果父类是一个空对象，则其尺寸为 ``0`` 。

但这并不是故事的结束，在这个例子中，我们的的模版参数是一个类，即仿函数。但可以做为谓词的不仅仅是仿函数，还可以是真正的函数，以及 ``lambda`` 。
我们如何让用户用同一个模版名字就可以同时允许用户使用仿函数，函数和 ``lambda`` ，就像这样：

.. code-block:: c++

   struct Pred {
     auto operator()() const -> bool { return true; }
   };

   auto func() -> bool { return true; }
   auto lambda = [] { return true; }

   Optional<Pred>;
   Optional<func>;
   Optional<lambda>;

很不幸，由于仿函数是 **类型** ，而 普通函数和 ``lambda`` 是 **值** 。这属于完全不同的集合。而 ``C++`` 既不允许 **类模版** 在特化时使用不同
类别的参数，也不允许有两个类模版的 **主模版** (primary template) 同名。因而，针对这两种情况，我们只能定义两个不同名的模版类：

.. code-block:: c++

   template <template PRED>
   struct OptionalForClass : private PRED {
      // ...
   };

   using Func = auto () -> bool;

   template <Func F>
   struct OptionalForFunction {
      // ...
   };

这样用户就不得不在不同情况下，明确用不同的名字的模版来实力化。这就给用户带来了不便。究竟有没有一种方法，可以让用户用同一个名字，
或者同一个表达式就能在不知情的情况下，自动选择匹配的情况？

而高度灵活的函数模版这时候成了救世主。因为函数的重载非常灵活：两个同名函数可以除了名字一样，其它都不一样。
比如，参数个数，参数类型。如果是模版的话，模版的参数列表也可以完全不同。所以，我们可以定义两个同名函数：

.. code-block:: c++

   template <template PRED>
   auto DeduceOptionalType() -> OptionalForClass<PRED>;

   template <Func F>
   auto DeduceOptionalType() -> OptionalForFunction<F>;

然后，用户就可以使用如下统一的表达式来应对两种不同情况：

.. code-block:: c++

   decltype(DeduceOptionalType<Pred>())   a;
   decltype(DeduceOptionalType<func>())   b;
   decltype(DeduceOptionalType<lambda>()) c;

当然，用一个宏，就可以将细节掩盖，让用户不要为之困扰：

.. code-block:: c++

   #define __optional(t) decltype(DeduceOptionalType<t>())

   __optional(Pred)   a;
   __optional(func)   b;
   __optional(lambda) c;


注意，那两个 ``DeduceOptionalType`` 函数，只需要声明，不需要实现。因为我们只关心通过 ``decltype`` 求出的返回值类型。
对于这个目的，声明就足够了。

现在，可以再去看看那两个函数声明，其表现形式，到意图，像不像前面提到的类模版 ``Deduction Guide`` ?

.. Important::

   - ``C++``  **类模版** 不允许在特化时使用不同的参数类别；也不允许不同的类主模版有同名；
   - 但 **函数模版** 没有这类限制；
   - 因而，你总是可以将不同的 **类模版** ，最后通过函数模版来实现表达式的统一。
